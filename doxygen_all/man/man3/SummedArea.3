.TH "SummedArea" 3 "Mon Mar 18 2019" "DICE-friendlySkeletons" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SummedArea \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBThreadArgGetArea\fP"
.br
.ti -1c
.RI "class \fBThreadArgGetSummedArea\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBfun\fP (double x)"
.br
.ti -1c
.RI "template<typename F > double \fBSimpson\fP (double a, double b, F f, int n=10)"
.br
.ti -1c
.RI "template<typename S , typename F > double \fBmapper\fP (double sample, double dx, S simpson, F \fBfun\fP, int n)"
.br
.ti -1c
.RI "double \fBsuccessor\fP (double a, double b)"
.br
.ti -1c
.RI "std::vector< double > \fBSummedAreaSkel\fP (std::vector< double > samples, double dx, double a, double b, int n, double &mapTimings, double &scanTimings, double &skelSeqTiming)"
.br
.ti -1c
.RI "std::vector< double > \fBSummedAreaSeq\fP (std::vector< double > samples, double dx, double a, double b, int n, double &nonParallelTimings)"
.br
.ti -1c
.RI "void \fBpthreadGetAreas\fP (std::vector< \fBThreadArgGetArea\fP > *threadArguments, size_t threadID)"
.br
.ti -1c
.RI "void \fBpthreadBarrier\fP (size_t nThreadsToBarrier)"
.br
.ti -1c
.RI "void \fBpthreadGetSummedArea\fP (std::vector< \fBThreadArgGetSummedArea\fP > *threadArguments, size_t threadID)"
.br
.ti -1c
.RI "std::vector< double > \fBSummedAreaPThreads\fP (std::vector< double > samples, double dx, double a, double b, int n, double &nonParallelTimings)"
.br
.ti -1c
.RI "int \fBSummedAreaMain\fP (int argc, char **argv)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "std::mutex \fBpthreadBarrierLock\fP"
.br
.ti -1c
.RI "std::condition_variable \fBpthreadCond_Var\fP"
.br
.ti -1c
.RI "size_t \fBpthreadThreadsArrived\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double SummedArea::fun (doublex)"

.SS "template<typename S , typename F > double SummedArea::mapper (doublesample, doubledx, Ssimpson, Ffun, intn)"

.SS "void SummedArea::pthreadBarrier (size_tnThreadsToBarrier)"

.SS "void SummedArea::pthreadGetAreas (std::vector< ThreadArgGetArea > *threadArguments, size_tthreadID)"

.SS "void SummedArea::pthreadGetSummedArea (std::vector< ThreadArgGetSummedArea > *threadArguments, size_tthreadID)"

.SS "template<typename F > double SummedArea::Simpson (doublea, doubleb, Ff, intn = \fC10\fP)"

.SS "double SummedArea::successor (doublea, doubleb)"

.SS "int SummedArea::SummedAreaMain (intargc, char **argv)"

.SS "std::vector<double> SummedArea::SummedAreaPThreads (std::vector< double >samples, doubledx, doublea, doubleb, intn, double &nonParallelTimings)"

.SS "std::vector<double> SummedArea::SummedAreaSeq (std::vector< double >samples, doubledx, doublea, doubleb, intn, double &nonParallelTimings)"

.SS "std::vector<double> SummedArea::SummedAreaSkel (std::vector< double >samples, doubledx, doublea, doubleb, intn, double &mapTimings, double &scanTimings, double &skelSeqTiming)"

.SH "Variable Documentation"
.PP 
.SS "std::mutex SummedArea::pthreadBarrierLock"

.SS "std::condition_variable SummedArea::pthreadCond_Var"

.SS "size_t SummedArea::pthreadThreadsArrived"

.SH "Author"
.PP 
Generated automatically by Doxygen for DICE-friendlySkeletons from the source code\&.
